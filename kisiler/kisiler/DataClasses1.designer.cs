#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Bu kod araç tarafından oluşturuldu.
//     Çalışma Zamanı Sürümü:4.0.30319.42000
//
//     Bu dosyada yapılacak değişiklikler yanlış davranışa neden olabilir ve
//     kod yeniden oluşturulursa kaybolur.
// </auto-generated>
//------------------------------------------------------------------------------

namespace kisiler
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="kisiler")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertİL(İL instance);
    partial void UpdateİL(İL instance);
    partial void DeleteİL(İL instance);
    partial void InsertİLCE(İLCE instance);
    partial void UpdateİLCE(İLCE instance);
    partial void DeleteİLCE(İLCE instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::kisiler.Properties.Settings.Default.kisilerConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<İL> GOREVLER
		{
			get
			{
				return this.GetTable<İL>();
			}
		}
		
		public System.Data.Linq.Table<İLCE> İLCE
		{
			get
			{
				return this.GetTable<İLCE>();
			}
		}

        public object İL { get; internal set; }
    }
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.İL")]
	public partial class İL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _İLİD;
		
		private string _İLLER;
		
		private EntitySet<İLCE> _İLCE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnİLİDChanging(int value);
    partial void OnİLİDChanged();
    partial void OnİLLERChanging(string value);
    partial void OnİLLERChanged();
    #endregion
		
		public İL()
		{
			this._İLCE = new EntitySet<İLCE>(new Action<İLCE>(this.attach_İLCE), new Action<İLCE>(this.detach_İLCE));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_İLİD", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int İLİD
		{
			get
			{
				return this._İLİD;
			}
			set
			{
				if ((this._İLİD != value))
				{
					this.OnİLİDChanging(value);
					this.SendPropertyChanging();
					this._İLİD = value;
					this.SendPropertyChanged("İLİD");
					this.OnİLİDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_İLLER", DbType="VarChar(13)")]
		public string İLLER
		{
			get
			{
				return this._İLLER;
			}
			set
			{
				if ((this._İLLER != value))
				{
					this.OnİLLERChanging(value);
					this.SendPropertyChanging();
					this._İLLER = value;
					this.SendPropertyChanged("İLLER");
					this.OnİLLERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="İL_İLCE", Storage="_İLCE", ThisKey="İLİD", OtherKey="İLİD")]
		public EntitySet<İLCE> İLCE
		{
			get
			{
				return this._İLCE;
			}
			set
			{
				this._İLCE.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_İLCE(İLCE entity)
		{
			this.SendPropertyChanging();
			entity.İL = this;
		}
		
		private void detach_İLCE(İLCE entity)
		{
			this.SendPropertyChanging();
			entity.İL = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.İLCE")]
	public partial class İLCE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _İLCEİD;
		
		private System.Nullable<int> _İLİD;
		
		private string _İLCELER;
		
		private EntityRef<İL> _İL;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnİLCEİDChanging(int value);
    partial void OnİLCEİDChanged();
    partial void OnİLİDChanging(System.Nullable<int> value);
    partial void OnİLİDChanged();
    partial void OnİLCELERChanging(string value);
    partial void OnİLCELERChanged();
    #endregion
		
		public İLCE()
		{
			this._İL = default(EntityRef<İL>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_İLCEİD", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int İLCEİD
		{
			get
			{
				return this._İLCEİD;
			}
			set
			{
				if ((this._İLCEİD != value))
				{
					this.OnİLCEİDChanging(value);
					this.SendPropertyChanging();
					this._İLCEİD = value;
					this.SendPropertyChanged("İLCEİD");
					this.OnİLCEİDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_İLİD", DbType="Int")]
		public System.Nullable<int> İLİD
		{
			get
			{
				return this._İLİD;
			}
			set
			{
				if ((this._İLİD != value))
				{
					if (this._İL.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnİLİDChanging(value);
					this.SendPropertyChanging();
					this._İLİD = value;
					this.SendPropertyChanged("İLİD");
					this.OnİLİDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_İLCELER", DbType="VarChar(13) NOT NULL", CanBeNull=false)]
		public string İLCELER
		{
			get
			{
				return this._İLCELER;
			}
			set
			{
				if ((this._İLCELER != value))
				{
					this.OnİLCELERChanging(value);
					this.SendPropertyChanging();
					this._İLCELER = value;
					this.SendPropertyChanged("İLCELER");
					this.OnİLCELERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="İL_İLCE", Storage="_İL", ThisKey="İLİD", OtherKey="İLİD", IsForeignKey=true, DeleteRule="CASCADE")]
		public İL İL
		{
			get
			{
				return this._İL.Entity;
			}
			set
			{
				İL previousValue = this._İL.Entity;
				if (((previousValue != value) 
							|| (this._İL.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._İL.Entity = null;
						previousValue.İLCE.Remove(this);
					}
					this._İL.Entity = value;
					if ((value != null))
					{
						value.İLCE.Add(this);
						this._İLİD = value.İLİD;
					}
					else
					{
						this._İLİD = default(Nullable<int>);
					}
					this.SendPropertyChanged("İL");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
